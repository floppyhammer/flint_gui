#include "camera3d.h"

// The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default.
// We need to configure it to use the Vulkan range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "glm/gtx/rotate_vector.hpp"

namespace Flint {

void Camera3d::look_at(const glm::vec3 &target) {
    auto distance = target - position;
    // direction = distance / glm::length(distance);
}

void Camera3d::update(double dt) {
    // TODO: do not update camera in the UPDATE propagation.
    // Instead, do it before or after the propagation.
    auto facing = up;
    facing = glm::rotate(facing, rotation.x, glm::vec3(1.0f, 0.0f, 0.0f));
    facing = glm::rotate(facing, rotation.y, glm::vec3(0.0f, 1.0f, 0.0f));
    facing = glm::rotate(facing, rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));

    // FIXME: Modify center to camera direction.
    view_matrix = glm::lookAt(position, position + facing, up);
}

glm::mat4 Camera3d::get_view_matrix() const {
    return view_matrix;
}

void Camera3d::set_active(bool new_value) {
    active = new_value;
}

glm::vec3 Camera3d::get_up_direction() const {
    return up;
}

std::shared_ptr<ImageTexture> Camera3d::get_texture() const {
    return render_target->texture;
}

} // namespace Flint
